{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","activePage","currentPage","setCurrentPage","repoes","setRepoes","currentLanguage","setCurrentLanguage","useEffect","axios","get","then","response","console","log","data","items","catch","error","window","scroll","top","left","className","value","onChange","event","language","target","map","key","scope","undefined","repo","id","name","charAt","toUpperCase","slice","owner","src","avatar_url","alt","description","created_at","forks","license","clone_url","homepage","href","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","pageNumber","itemClass","linkClass","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oSA2IeA,MArIf,WAAgB,IAAD,EACyBC,mBAAS,CAAEC,WAAY,IADhD,mBACNC,EADM,KACOC,EADP,OAEeH,mBAAS,IAFxB,mBAENI,EAFM,KAEEC,EAFF,OAGgCL,mBAAS,cAHzC,mBAGNM,EAHM,KAGUC,EAHV,KAmCb,OAlBAC,qBAAU,WACRC,IACGC,IADH,gEAE6DJ,EAF7D,mDAEuHJ,EAAYD,aAEhIU,MAAK,SAAUC,GAEdC,QAAQC,IAAIF,EAASG,KAAKC,OAC1BX,EAAUO,EAASG,KAAKC,UAEzBC,OAAM,SAAUC,GAEfL,QAAQC,IAAII,MAGhBC,OAAOC,OAAO,CAAEC,IAAK,EAAGC,KAAM,MAC7B,CAACpB,EAAYD,WAAWK,IAGzB,yBAAKiB,UAAU,OACb,wBAAIA,UAAU,kDAAd,qBAKA,yBAAKA,UAAU,uCACb,4BACAC,MAAOlB,EACPmB,SAjCN,SAAwBC,GACpB,IAAMC,EAAWD,EAAME,OAAOJ,MAC9BjB,EAAmBoB,IAgCjBJ,UAAU,4BApCE,CAAC,aAAa,SAAS,OAAO,MAAM,KAAK,MAAM,aAAa,QAAQ,IAAI,QAqCvEM,KAAI,SAAAF,GAAQ,OACrB,4BAAQG,IAAKH,EAAUJ,UAAU,cAAcC,MAAOG,GAAWA,QAOvE,2BAAOJ,UAAU,gEACf,+BACE,wBAAIA,UAAU,gBACZ,wBAAIQ,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,eAEA,wBAAIA,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAEA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,cAGJ,oCACcC,IAAX5B,GACCA,EAAOyB,KAAI,SAACI,GAAD,OACT,wBAAIH,IAAKG,EAAKC,IACZ,wBAAIX,UAAU,oBACXU,EAAKE,KAAKC,OAAO,GAAGC,cAAgBJ,EAAKE,KAAKG,MAAM,IAEvD,4BACGL,EAAKM,OACJ,yBACEhB,UAAU,SACViB,IAAKP,EAAKM,MAAME,WAChBC,IAAI,YAIV,4BAAKT,EAAKU,aAEV,4BAAKV,EAAKW,WAAWN,MAAM,EAAG,KAE9B,4BAAKL,EAAKY,OACV,4BACGZ,EAAKa,SAAgC,OAArBb,EAAKa,QAAQhB,IAC1BG,EAAKa,QAAQhB,IAAIO,cACjB,SAGN,4BAAKJ,EAAKN,UACV,4BAAKM,EAAKc,WAES,KAAlBd,EAAKe,SACJ,wBAAIzB,UAAU,eAAd,QAEA,wBAAIA,UAAU,eACZ,uBACEA,UAAU,yBACV0B,KAAI,UAAKhB,EAAKe,WAFhB,aAad,yBAAKzB,UAAU,qEACb,kBAAC,IAAD,CACEtB,WAAYC,EAAYD,WACxBiD,kBAAmB,GACnBC,gBAAiB,IACjBC,mBAAoB,EACpB3B,SAvHR,SAA0B4B,GACxBxC,QAAQC,IAAR,yBAA8BuC,IAC9BlD,EAAe,CAAEF,WAAYoD,KAsHvBC,UAAU,YACVC,UAAU,iBCxHAC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMoD,c","file":"static/js/main.606cee32.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Pagination from \"react-js-pagination\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState({ activePage: 1 });\n  const [repoes, setRepoes] = useState([]);\n  const [currentLanguage,setCurrentLanguage] = useState(\"Javascript\");\n\n  function handlePageChange(pageNumber) {\n    console.log(`active page is ${pageNumber}`);\n    setCurrentPage({ activePage: pageNumber });\n  }\n\n  const languages = [\"Javascript\",\"Python\",\"Java\",\"Php\",\"C#\",\"C++\",\"Typescript\",\"Shell\",\"C\",\"Ruby\"];\n\n  function selectLanguage(event){\n      const language = event.target.value;\n      setCurrentLanguage(language);\n  }\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.github.com/search/repositories?q=language:${currentLanguage}&sort=stars&order=desc&per_page=20&page=${currentPage.activePage}`\n      )\n      .then(function (response) {\n        // handle success\n        console.log(response.data.items);\n        setRepoes(response.data.items);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n    window.scroll({ top: 0, left: 0 });\n  }, [currentPage.activePage,currentLanguage]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-center py-4 mb-3 bg-secondary text-white \">\n        Browse Top Repoes\n      </h1>\n\n      {/* language select */}\n      <div className=\"d-flex justify-content-center mb-3 \">\n        <select \n        value={currentLanguage} \n        onChange={selectLanguage} \n        className=\"form-control-lg bg-light\">\n          {languages.map(language=>\n            <option key={language} className=\"text-center\" value={language}>{language}</option>          \n            )}\n          \n        </select>\n      </div>\n\n      {/* the table */}\n      <table className=\"container col-lg-10 table  mb-5 table-striped table-bordered\">\n        <thead>\n          <tr className=\"table-active\">\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Owner</th>\n            <th scope=\"col\">Description</th>\n\n            <th scope=\"col\">Created</th>\n            <th scope=\"col\">Forks</th>\n            <th scope=\"col\">Licence</th>\n\n            <th scope=\"col\">Language</th>\n            <th scope=\"col\">Clone_url</th>\n            <th scope=\"col\">Homepage</th>\n          </tr>\n        </thead>\n        <tbody>\n          {repoes !== undefined &&\n            repoes.map((repo) => (\n              <tr key={repo.id}>\n                <td className=\"font-weight-bold\">\n                  {repo.name.charAt(0).toUpperCase() + repo.name.slice(1)}\n                </td>\n                <td>\n                  {repo.owner && (\n                    <img\n                      className=\"avatar\"\n                      src={repo.owner.avatar_url}\n                      alt=\"avatar\"\n                    />\n                  )}\n                </td>\n                <td>{repo.description}</td>\n\n                <td>{repo.created_at.slice(0, 10)}</td>\n\n                <td>{repo.forks}</td>\n                <td>\n                  {repo.license && repo.license.key !== null\n                    ? repo.license.key.toUpperCase()\n                    : \"other\"}\n                </td>\n\n                <td>{repo.language}</td>\n                <td>{repo.clone_url}</td>\n\n                {repo.homepage === \"\" ? (\n                  <td className=\"text-center\">None</td>\n                ) : (\n                  <td className=\"text-center\">\n                    <a\n                      className=\"badge badge-secondary \"\n                      href={`${repo.homepage}`}\n                    >\n                      Go\n                    </a>\n                  </td>\n                )}\n              </tr>\n            ))}\n        </tbody>\n      </table>\n\n      <div className=\"d-flex justify-content-center bg-secondary p-5 align-items-center\">\n        <Pagination\n          activePage={currentPage.activePage}\n          itemsCountPerPage={20}\n          totalItemsCount={1000}\n          pageRangeDisplayed={5}\n          onChange={handlePageChange}\n          itemClass=\"page-item\"\n          linkClass=\"page-link\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}